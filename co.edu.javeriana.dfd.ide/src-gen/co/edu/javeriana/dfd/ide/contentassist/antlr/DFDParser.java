/*
 * generated by Xtext 2.23.0
 */
package co.edu.javeriana.dfd.ide.contentassist.antlr;

import co.edu.javeriana.dfd.ide.contentassist.antlr.internal.InternalDFDParser;
import co.edu.javeriana.dfd.services.DFDGrammarAccess;
import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class DFDParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(DFDGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, DFDGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getElementoAccess().getAlternatives(), "rule__Elemento__Alternatives");
			builder.put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
			builder.put(grammarAccess.getDFDAccess().getGroup(), "rule__DFD__Group__0");
			builder.put(grammarAccess.getDFDAccess().getGroup_3(), "rule__DFD__Group_3__0");
			builder.put(grammarAccess.getDFDAccess().getGroup_3_3(), "rule__DFD__Group_3_3__0");
			builder.put(grammarAccess.getDFDAccess().getGroup_4(), "rule__DFD__Group_4__0");
			builder.put(grammarAccess.getDFDAccess().getGroup_4_3(), "rule__DFD__Group_4_3__0");
			builder.put(grammarAccess.getFlujoAccess().getGroup(), "rule__Flujo__Group__0");
			builder.put(grammarAccess.getEStringAccess().getGroup_0(), "rule__EString__Group_0__0");
			builder.put(grammarAccess.getEStringAccess().getGroup_1(), "rule__EString__Group_1__0");
			builder.put(grammarAccess.getProcesoAccess().getGroup(), "rule__Proceso__Group__0");
			builder.put(grammarAccess.getEntidadExternaAccess().getGroup(), "rule__EntidadExterna__Group__0");
			builder.put(grammarAccess.getAlmacenAccess().getGroup(), "rule__Almacen__Group__0");
			builder.put(grammarAccess.getDFDAccess().getFlujoAssignment_3_2(), "rule__DFD__FlujoAssignment_3_2");
			builder.put(grammarAccess.getDFDAccess().getFlujoAssignment_3_3_1(), "rule__DFD__FlujoAssignment_3_3_1");
			builder.put(grammarAccess.getDFDAccess().getElementoAssignment_4_2(), "rule__DFD__ElementoAssignment_4_2");
			builder.put(grammarAccess.getDFDAccess().getElementoAssignment_4_3_1(), "rule__DFD__ElementoAssignment_4_3_1");
			builder.put(grammarAccess.getFlujoAccess().getNameAssignment_2(), "rule__Flujo__NameAssignment_2");
			builder.put(grammarAccess.getFlujoAccess().getAnteriorAssignment_5(), "rule__Flujo__AnteriorAssignment_5");
			builder.put(grammarAccess.getFlujoAccess().getNombreAssignment_7(), "rule__Flujo__NombreAssignment_7");
			builder.put(grammarAccess.getFlujoAccess().getSiguienteAssignment_9(), "rule__Flujo__SiguienteAssignment_9");
			builder.put(grammarAccess.getProcesoAccess().getNameAssignment_2(), "rule__Proceso__NameAssignment_2");
			builder.put(grammarAccess.getEntidadExternaAccess().getNameAssignment_2(), "rule__EntidadExterna__NameAssignment_2");
			builder.put(grammarAccess.getAlmacenAccess().getNameAssignment_2(), "rule__Almacen__NameAssignment_2");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private DFDGrammarAccess grammarAccess;

	@Override
	protected InternalDFDParser createParser() {
		InternalDFDParser result = new InternalDFDParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public DFDGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(DFDGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
